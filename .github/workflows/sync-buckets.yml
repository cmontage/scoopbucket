name: Sync Scoop Official Buckets

on:
  schedule:
    # 每天北京时间早上8点运行 (UTC时间0点)
    - cron: '0 0 * * *'
  workflow_dispatch:
    # 允许手动触发
    inputs:
      bucket:
        description: 'Specific bucket to sync (leave empty for all)'
        required: false
        default: ''

env:
  TZ: Asia/Shanghai

jobs:
  sync-buckets:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      max-parallel: 1  # 一次只运行一个job，避免并发推送冲突
      matrix:
        bucket:
          - name: main
            repo: ScoopInstaller/Main
          - name: extras  
            repo: ScoopInstaller/Extras
          - name: versions
            repo: ScoopInstaller/Versions
          - name: nirsoft
            repo: ScoopInstaller/Nirsoft
          - name: php
            repo: ScoopInstaller/PHP
          - name: nonportable
            repo: ScoopInstaller/Nonportable
          - name: java
            repo: ScoopInstaller/Java
          - name: games
            repo: Calinou/scoop-games
          - name: nerd-fonts
            repo: matthewjberger/scoop-nerd-fonts
          - name: sysinternals
            repo: niheaven/scoop-sysinternals
    
    steps:
    - name: Checkout repository
      if: github.event.inputs.bucket == '' || github.event.inputs.bucket == matrix.bucket.name
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Git
      if: github.event.inputs.bucket == '' || github.event.inputs.bucket == matrix.bucket.name
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Skip if specific bucket requested
      if: github.event.inputs.bucket != '' && github.event.inputs.bucket != matrix.bucket.name
      run: |
        echo "Skipping ${{ matrix.bucket.name }} - only syncing ${{ github.event.inputs.bucket }}"
        exit 0

    - name: Check existing files
      if: github.event.inputs.bucket == '' || github.event.inputs.bucket == matrix.bucket.name
      id: check_existing
      run: |
        if [ -d "buckets/${{ matrix.bucket.name }}" ]; then
          existing_count=$(find buckets/${{ matrix.bucket.name }} -name "*.json" | wc -l)
          echo "existing_count=$existing_count" >> $GITHUB_OUTPUT
          echo "Found $existing_count existing files in buckets/${{ matrix.bucket.name }}"
        else
          echo "existing_count=0" >> $GITHUB_OUTPUT
          echo "No existing files found for ${{ matrix.bucket.name }}"
        fi

    - name: Clone source repository
      if: github.event.inputs.bucket == '' || github.event.inputs.bucket == matrix.bucket.name
      run: |
        echo "Cloning ${{ matrix.bucket.repo }}..."
        # 创建临时目录
        mkdir -p temp_sync
        cd temp_sync
        
        # 克隆源仓库（仅bucket和scripts目录）
        git clone --filter=blob:none --sparse https://github.com/${{ matrix.bucket.repo }}.git source_repo
        cd source_repo
        git sparse-checkout set bucket scripts
        
        # 统计文件数量并复制内容
        bucket_files=0
        script_files=0
        
        # 创建目标目录（强制创建，即使已存在）
        mkdir -p ../../buckets/${{ matrix.bucket.name }}
        mkdir -p ../../scripts
        
        # 处理bucket目录
        if [ -d "bucket" ]; then
          bucket_files=$(find bucket -name "*.json" | wc -l)
          echo "Found $bucket_files JSON files in bucket directory"
          
          # 清空目标bucket目录以确保同步准确性
          rm -f ../../buckets/${{ matrix.bucket.name }}/*.json 2>/dev/null || true
          
          # 复制所有JSON文件
          echo "Copying bucket JSON files..."
          find bucket -name "*.json" -exec cp {} ../../buckets/${{ matrix.bucket.name }}/ \;
          
          # 验证bucket复制结果
          copied_bucket_files=$(find ../../buckets/${{ matrix.bucket.name }} -name "*.json" | wc -l)
          echo "Successfully copied $copied_bucket_files bucket files to buckets/${{ matrix.bucket.name }}"
        else
          echo "No bucket directory found in source repository"
        fi
        
        # 处理scripts目录
        if [ -d "scripts" ]; then
          script_files=$(find scripts -type f | wc -l)
          echo "Found $script_files script files in scripts directory"
          
          # 复制所有脚本文件到统一的scripts目录（添加仓库前缀避免冲突）
          echo "Copying script files..."
          for script_file in $(find scripts -type f); do
            # 获取相对路径并添加仓库前缀
            rel_path=${script_file#scripts/}
            target_path="../../scripts/${{ matrix.bucket.name }}_${rel_path}"
            mkdir -p "$(dirname "$target_path")"
            cp "$script_file" "$target_path"
          done
          
          # 验证scripts复制结果
          copied_script_files=$(find ../../scripts -name "${{ matrix.bucket.name }}_*" | wc -l)
          echo "Successfully copied $copied_script_files script files to scripts/ with ${{ matrix.bucket.name }}_ prefix"
        else
          echo "No scripts directory found in source repository"
        fi
        
        total_files=$((bucket_files + script_files))
        echo "Total files synced for ${{ matrix.bucket.name }}: $total_files ($bucket_files bucket + $script_files scripts)"
        
        # 清理临时目录
        cd ../..
        rm -rf temp_sync

    - name: Commit changes for this bucket
      if: github.event.inputs.bucket == '' || github.event.inputs.bucket == matrix.bucket.name
      run: |
        # 先添加所有变化到Git
        git add buckets/${{ matrix.bucket.name }}/ scripts/
        
        # 检查是否有staged变化
        if git diff --cached --quiet; then
          echo "No changes detected for ${{ matrix.bucket.name }}"
        else
          echo "Changes detected for ${{ matrix.bucket.name }}, committing..."
          
          # 统计文件数量
          bucket_count=$(find buckets/${{ matrix.bucket.name }} -name "*.json" 2>/dev/null | wc -l)
          script_count=$(find scripts -name "${{ matrix.bucket.name }}_*" 2>/dev/null | wc -l)
          total_count=$((bucket_count + script_count))
          
          git commit -m "Update ${{ matrix.bucket.name }} - $total_count files ($bucket_count bucket + $script_count scripts) ($(date '+%Y-%m-%d %H:%M:%S'))"
          echo "Committed changes for ${{ matrix.bucket.name }}: $total_count files"
        fi

    - name: Push changes
      if: github.event.inputs.bucket == '' || github.event.inputs.bucket == matrix.bucket.name
      run: |
        if git log origin/main..HEAD --oneline | grep -q .; then
          echo "Pushing changes for ${{ matrix.bucket.name }}..."
          
          # 推送前先拉取最新更改，避免冲突
          git pull --rebase origin main || true
          
          # 尝试推送，如果失败则重试
          for i in {1..3}; do
            if git push origin main; then
              echo "Successfully pushed changes for ${{ matrix.bucket.name }}"
              break
            else
              echo "Push failed, retrying in 5 seconds... (attempt $i/3)"
              sleep 5
              git pull --rebase origin main || true
            fi
          done
        else
          echo "No new commits to push for ${{ matrix.bucket.name }}"
        fi

  update-readme:
    needs: sync-buckets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Pull latest changes
      run: git pull origin main
    
    - name: Update README timestamp and statistics
      run: |
        current_time=$(TZ=Asia/Shanghai date '+%Y年%m月%d日 %H:%M:%S')
        
        # 创建临时文件来重新生成README
        cp README.md README_temp.md
        
        # 移除旧的统计信息部分（从"最后更新时间"到文件末尾）
        sed -i '/最后更新时间:/,$d' README_temp.md
        
        # 添加新的时间戳
        echo "最后更新时间: $current_time" >> README_temp.md
        echo "" >> README_temp.md
        
        # 添加新的统计信息
        echo "## 统计信息" >> README_temp.md
        echo "" >> README_temp.md
        
        total_count=0
        total_scripts=$(find scripts -type f | wc -l)
        for bucket in main extras versions nirsoft php nonportable java games nerd-fonts sysinternals; do
          if [ -d "buckets/$bucket" ]; then
            bucket_count=$(find buckets/$bucket -name "*.json" | wc -l)
            script_count=$(find scripts -name "${bucket}_*" 2>/dev/null | wc -l)
            total_bucket_count=$((bucket_count + script_count))
            if [ "$bucket_count" -gt 0 ]; then
              if [ "$script_count" -gt 0 ]; then
                echo "- $bucket: $bucket_count 个应用程序 + $script_count 个脚本" >> README_temp.md
              else
                echo "- $bucket: $bucket_count 个应用程序" >> README_temp.md
              fi
              total_count=$((total_count + bucket_count))
            fi
          fi
        done
        echo "" >> README_temp.md
        echo "总计: $total_count 个应用程序 + $total_scripts 个脚本" >> README_temp.md
        
        # 替换原文件
        mv README_temp.md README.md
        
        echo "Updated README with $total_count total applications"
    
    - name: Commit README update
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git add README.md
        if git diff --cached --quiet; then
          echo "No changes to commit for README"
        else
          git commit -m "Update README with latest statistics - $(date '+%Y-%m-%d %H:%M:%S')"
          git push origin main
        fi
